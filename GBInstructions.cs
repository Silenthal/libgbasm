//Copyright © 2012 Silenthal

//This file is part of LibGBasm.
//LibGBasm is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//LibGBasm is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.

//You should have received a copy of the GNU Lesser General Public License
//along with LibGBasm.  If not, see <http://www.gnu.org/licenses/>.
namespace LibGBasm
{
	internal class GBInstructions
	{
		private static GBArgument BCMap = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, IsMemMap = true, RegDoubleArg = GBRegisterDouble.bc };
		private static GBArgument DEMap = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, IsMemMap = true, RegDoubleArg = GBRegisterDouble.de };
		private static GBArgument HLMap = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, IsMemMap = true, RegDoubleArg = GBRegisterDouble.hl };
		private static GBArgument CMap = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, IsMemMap = true, RegSingleArg = GBRegisterSingle.c };

		private static GBArgument NCCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.nc };
		private static GBArgument CCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.c };
		private static GBArgument NZCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.nz };
		private static GBArgument ZCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.z };

		private static GBArgument RegA = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.a };
		private static GBArgument RegB = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.b };
		private static GBArgument RegC = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.c };
		private static GBArgument RegD = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.d };
		private static GBArgument RegE = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.e };
		private static GBArgument RegH = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.h };
		private static GBArgument RegL = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.l };

		private static GBArgument RegAF = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.af };
		private static GBArgument RegBC = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.bc };
		private static GBArgument RegDE = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.de };
		private static GBArgument RegHL = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.hl };
		private static GBArgument RegSP = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.sp };

		private static GBArgument ByteArg = new GBArgument() { ArgType = GBArgumentType.Byte };
		private static GBArgument WordArg = new GBArgument() { ArgType = GBArgumentType.Word };
		private static GBArgument MemMapArg = new GBArgument() { ArgType = GBArgumentType.Word, IsMemMap = true };

		private static GBArgument MemMapByteArg = new GBArgument() { ArgType = GBArgumentType.Byte, IsMemMap = true, IsFFNNInst = true };

		private static GBArgument BitArg0 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 0 };
		private static GBArgument BitArg1 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 1 };
		private static GBArgument BitArg2 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 2 };
		private static GBArgument BitArg3 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 3 };
		private static GBArgument BitArg4 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 4 };
		private static GBArgument BitArg5 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 5 };
		private static GBArgument BitArg6 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 6 };
		private static GBArgument BitArg7 = new GBArgument() { ArgType = GBArgumentType.Bit, NumberArg = 7 };

		#region Regular Instructions

		internal static GBInstructionUnit[] InstructionUnitTable = new GBInstructionUnit[256]
		{
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.nop },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegBC, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = BCMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegBC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rlca },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapArg, Arg2 = RegSP },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegBC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = BCMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegBC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rrca },

			new GBInstructionUnit() { InstSize = 2, ArgCount = 0, InstType = InstructionType.stop },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegDE, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = DEMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegDE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rla },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 1, InstType = InstructionType.jr, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegDE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = DEMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegDE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rra },

			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = NZCond, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegHL, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldi, Arg1 = HLMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegHL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.daa },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = ZCond, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegHL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldi, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegHL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.cpl },

			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = NCCond, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegSP, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldd, Arg1 = HLMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegSP },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.scf },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = CCond, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegSP },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldd, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegSP },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ccf },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.halt },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sub, Arg1 = RegA, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg2 = RegA },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = NZCond },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegBC },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = NZCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 1, InstType = InstructionType.jp, Arg1 = WordArg },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = NZCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegBC },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x00 } },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = ZCond },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ret },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = ZCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 0, InstType = InstructionType.cb },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = ZCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 1, InstType = InstructionType.call, Arg1 = WordArg },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x08 } },

			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = NCCond },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegDE },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = NCCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = NCCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegDE },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 1, InstType = InstructionType.sub, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x10 } },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = CCond },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.reti },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = CCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = CCond, Arg2 = WordArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x18 } },

			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapByteArg, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegHL },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = CMap, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegHL },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.and, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x20 } },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegSP, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.jp, Arg1 = RegHL },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapArg, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 1, InstType = InstructionType.xor, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x28 } },

			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = MemMapByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegAF },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = CMap },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.di },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegAF },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 1, InstType = InstructionType.or, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x30 } },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ldhl, Arg1 = RegSP, Arg2 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegSP, Arg2 = RegHL },
			new GBInstructionUnit() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = MemMapArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ei },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 0, InstType = InstructionType.db },
			new GBInstructionUnit() { InstSize = 2, ArgCount = 1, InstType = InstructionType.cp, Arg1 = ByteArg },
			new GBInstructionUnit() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumberArg = 0x38 } }
		};

		#endregion Regular Instructions

		#region CB Instructions

		internal static GBInstructionUnit[] CBInstructionUnitTable = new GBInstructionUnit[256]
		{
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstructionUnit() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
		};

		#endregion CB Instructions
	}
}