namespace LibGBasm
{
	internal class Z80Instructions
	{
		private static Argument NoArg = new Argument() { argType = ArgumentType.None };
		private static Argument BCMap = new Argument() { argType = ArgumentType.RegisterDoubleMemMap, rdArg = RegisterDouble.bc };
		private static Argument DEMap = new Argument() { argType = ArgumentType.RegisterDoubleMemMap, rdArg = RegisterDouble.de };
		private static Argument HLMap = new Argument() { argType = ArgumentType.RegisterDoubleMemMap, rdArg = RegisterDouble.hl };
		private static Argument CMap = new Argument() { argType = ArgumentType.RegisterSingleMemMap, rsArg = RegisterSingle.c };

		private static Argument NCCond = new Argument() { argType = ArgumentType.Conditional, cArg = Conditional.nc };
		private static Argument CCond = new Argument() { argType = ArgumentType.Conditional, cArg = Conditional.c };
		private static Argument NZCond = new Argument() { argType = ArgumentType.Conditional, cArg = Conditional.nz };
		private static Argument ZCond = new Argument() { argType = ArgumentType.Conditional, cArg = Conditional.z };

		private static Argument RegA = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.a };
		private static Argument RegB = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.b };
		private static Argument RegC = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.c };
		private static Argument RegD = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.d };
		private static Argument RegE = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.e };
		private static Argument RegH = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.h };
		private static Argument RegL = new Argument() { argType = ArgumentType.Register, rsArg = RegisterSingle.l };

		private static Argument RegAF = new Argument() { argType = ArgumentType.RegisterPair, rdArg = RegisterDouble.af };
		private static Argument RegBC = new Argument() { argType = ArgumentType.RegisterPair, rdArg = RegisterDouble.bc };
		private static Argument RegDE = new Argument() { argType = ArgumentType.RegisterPair, rdArg = RegisterDouble.de };
		private static Argument RegHL = new Argument() { argType = ArgumentType.RegisterPair, rdArg = RegisterDouble.hl };
		private static Argument RegSP = new Argument() { argType = ArgumentType.RegisterPair, rdArg = RegisterDouble.sp };

		private static Argument ByteArg = new Argument() { argType = ArgumentType.Byte };
		private static Argument WordArg = new Argument() { argType = ArgumentType.Word };
		private static Argument OffsetArg = new Argument() { argType = ArgumentType.Offset };
		private static Argument MemMapArg = new Argument() { argType = ArgumentType.MemMap };

		private static Argument MemMapByteArg = new Argument() { argType = ArgumentType.MemMapFFByte };

		private static Argument ByteArg0 = new Argument() { argType = ArgumentType.Byte, byteArg = 0 };
		private static Argument ByteArg1 = new Argument() { argType = ArgumentType.Byte, byteArg = 1 };
		private static Argument ByteArg2 = new Argument() { argType = ArgumentType.Byte, byteArg = 2 };
		private static Argument ByteArg3 = new Argument() { argType = ArgumentType.Byte, byteArg = 3 };
		private static Argument ByteArg4 = new Argument() { argType = ArgumentType.Byte, byteArg = 4 };
		private static Argument ByteArg5 = new Argument() { argType = ArgumentType.Byte, byteArg = 5 };
		private static Argument ByteArg6 = new Argument() { argType = ArgumentType.Byte, byteArg = 6 };
		private static Argument ByteArg7 = new Argument() { argType = ArgumentType.Byte, byteArg = 7 };

		#region Regular Instructions

		public static InstructionUnit[] InstructionUnitTable = new InstructionUnit[256]
		{
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.nop },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = RegBC, arg2 = WordArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = BCMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegBC },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegB },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.rlca },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = MemMapArg, arg2 = RegSP },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegHL, arg2 = RegBC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = BCMap },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegBC },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegC },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.rrca },

			new InstructionUnit() { instSize = 2, ArgCount = 0, instType = InstructionType.stop },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = RegDE, arg2 = WordArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = DEMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegDE },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegD },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.rla },
			new InstructionUnit() { instSize = 2, ArgCount = 1, instType = InstructionType.jr, arg1 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegHL, arg2 = RegDE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = DEMap },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegDE },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegE },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.rra },

			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.jr, arg1 = NZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = RegHL, arg2 = WordArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ldi, arg1 = HLMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegHL },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegL },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.daa },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.jr, arg1 = ZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegHL, arg2 = RegHL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ldi, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegHL },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegL },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.cpl },

			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.jr, arg1 = NCCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = RegSP, arg2 = WordArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ldd, arg1 = HLMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegSP },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.scf },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.jr, arg1 = CCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegHL, arg2 = RegSP },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ldd, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegSP },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.inc, arg1 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.dec, arg1 = RegA },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.ccf },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegB, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegC, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegD, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegE, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegH, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegL, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.halt },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = HLMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sub, arg1 = RegA, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.xor, arg1 = RegA, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.or, arg1 = RegA, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegB },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegC },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegD },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegE },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegH },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = HLMap },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.cp, arg1 = RegA, arg2 = RegA },

			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.ret, arg1 = NZCond },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.pop, arg1 = RegBC },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.jp, arg1 = NZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 3, ArgCount = 1, instType = InstructionType.jp, arg1 = OffsetArg },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.call, arg1 = NZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.push, arg1 = RegBC },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.add, arg1 = RegA, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x00 } },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.ret, arg1 = ZCond },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.ret },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.jp, arg1 = ZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 2, ArgCount = 0, instType = InstructionType.cb },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.call, arg1 = ZCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 3, ArgCount = 1, instType = InstructionType.call, arg1 = OffsetArg },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.adc, arg1 = RegA, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x08 } },

			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.ret, arg1 = NCCond },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.pop, arg1 = RegDE },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.jp, arg1 = NCCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.call, arg1 = NCCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.push, arg1 = RegDE },
			new InstructionUnit() { instSize = 2, ArgCount = 1, instType = InstructionType.sub, arg1 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x10 } },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.ret, arg1 = CCond },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.reti },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.jp, arg1 = CCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.call, arg1 = CCond, arg2 = OffsetArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.sbc, arg1 = RegA, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x18 } },

			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = MemMapByteArg, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.pop, arg1 = RegHL },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = CMap, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.push, arg1 = RegHL },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.and, arg1 = RegA, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x20 } },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.add, arg1 = RegSP, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.jp, arg1 = RegHL },
			new InstructionUnit() { instSize = 4, ArgCount = 2, instType = InstructionType.ld, arg1 = MemMapArg, arg2 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 2, ArgCount = 1, instType = InstructionType.xor, arg1 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x28 } },

			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = MemMapByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.pop, arg1 = RegAF },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = CMap },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.di },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.push, arg1 = RegAF },
			new InstructionUnit() { instSize = 2, ArgCount = 1, instType = InstructionType.or, arg1 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x30 } },
			new InstructionUnit() { instSize = 2, ArgCount = 2, instType = InstructionType.ldhl, arg1 = RegSP, arg2 = ByteArg },
			new InstructionUnit() { instSize = 1, ArgCount = 2, instType = InstructionType.ld, arg1 = RegSP, arg2 = RegHL },
			new InstructionUnit() { instSize = 3, ArgCount = 2, instType = InstructionType.ld, arg1 = RegA, arg2 = MemMapArg },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.ei },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 1, ArgCount = 0, instType = InstructionType.invalid },
			new InstructionUnit() { instSize = 2, ArgCount = 1, instType = InstructionType.cp, arg1 = RegA },
			new InstructionUnit() { instSize = 1, ArgCount = 1, instType = InstructionType.rst, arg1 = new Argument(){ argType = ArgumentType.Byte, byteArg = 0x38 } }
		};

		#endregion Regular Instructions

		#region CB Instructions

		public static InstructionUnit[] CBInstructionUnitTable = new InstructionUnit[256]
		{
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rlc, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rrc, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rl, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.rr, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sla, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.sra, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.swap, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.srl, ArgCount = 1, arg1 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg0, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg1, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg2, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg3, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg4, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg5, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg6, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.bit, ArgCount = 2, arg1 = ByteArg7, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg0, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg1, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg2, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg3, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg4, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg5, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg6, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.res, ArgCount = 2, arg1 = ByteArg7, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg0, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg1, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg2, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg3, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg4, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg5, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg6, arg2 = RegA },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegB },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegC },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegD },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegE },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegH },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegL },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = HLMap },
			new InstructionUnit() { instSize = 2, instType = InstructionType.set, ArgCount = 2, arg1 = ByteArg7, arg2 = RegA },
		};

		#endregion CB Instructions
	}
}